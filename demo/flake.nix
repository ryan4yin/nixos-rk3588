{
  description = "NixOS configuration for rk3588 remote deployment with UEFI and U-Boot options";

  inputs = {
    # Use the local flake for testing or remote flake for production.
    nixos-rk3588.url = "path:.."; # For local testing
    # nixos-rk3588.url = "github:ryan4yin/nixos-rk3588";  # For production
  };

  outputs = {
    nixos-rk3588,
    ...
  }: let
    # Import nixpkgs from nixos-rk3588 to use the same nixpkgs across configurations.
    inherit (nixos-rk3588.inputs) nixpkgs;

    # Define system architecture and different compilation options.
    bootType = "uefi"; # Change to "u-boot" for U-Boot

    # Possible values for compilationType: "local-native", "remote-native", or "cross".
    compilationType = "cross"; # Choose the compilation type here.

    localSystem = "x86_64-linux";
    targetSystem = "aarch64-linux";

    # Kernel packages based on compilationType (local native, remote native, or cross-compilation)
    pkgsKernel =
      if compilationType == "cross"
      then
        import nixpkgs {
          inherit localSystem;
          crossSystem = targetSystem;
        }
      else if compilationType == "local-native"
      then import nixpkgs {system = targetSystem;}
      else
        # For remote-native compilation
        import nixpkgs {system = targetSystem;};

    # Define bootloader based on bootType (UEFI or U-Boot)
    bootloaderModule =
      if bootType == "uefi"
      then
        # UEFI configuration with bootloader settings
        {
           # grub bootloader configured for UEFI
           boot = {
             # growPartition = true;  # If partition resizing is necessary
             kernelParams = ["console=ttyS0"];  # If you need serial console access
             # loader.timeout = lib.mkDefault 0;  # Optional, to skip GRUB menu
             initrd.availableKernelModules = ["uas"];  # If specific kernel modules are required
             loader.grub = {
               enable = true;
               device = "nodev";
               efiSupport = true;
               efiInstallAsRemovable = true;
             };
           };
        }
      else
        # U-Boot configuration using sd-image
        nixos-rk3588.nixosModules.orangepi5.sd-image;
  in {
    colmena = {
      meta = {
        # Use the correct package set for the system.
        nixpkgs = import nixpkgs {system = localSystem;};
        specialArgs = {
          rk3588 = {
            inherit nixpkgs pkgsKernel;
          };
          inherit nixpkgs;
        };
      };

      ## TODO: possibly need to change "opi5" to "orangepi5" or "orangepi5plus", the local host name if building locally
      opi5 = {
        deployment.targetHost =
          if compilationType != "cross"
          then "192.168.5.42"
          else null;
        deployment.targetUser =
          if compilationType != "cross"
          then "root"
          else null;

        # Allow local deployment only if building locally or if remote-native
        deployment.allowLocalDeployment = compilationType == "local-native";

        imports = [
          # Import the correct bootloader based on the selected bootType.
          bootloaderModule

          # Custom configuration
          ./configuration.nix
          ./user-group.nix

          # TODO: you will likely need a fileSystems entry, this can be pulled from hardware-configuration.nix generated by`nixos-generate-config`
        ];
      };
    };
  };
}
